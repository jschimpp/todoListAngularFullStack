{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport axios from 'axios';\nimport * as i0 from \"@angular/core\";\nclass DataSharingService {\n  constructor() {\n    this.tasksArraySubject = new BehaviorSubject([]);\n    this.tasks$ = this.tasksArraySubject.asObservable();\n  }\n  getTasks() {\n    axios.get('http://localhost:8080/tasks').then(response => {\n      const data = response.data;\n      this.tasksArraySubject.next(data);\n    }).catch(() => {\n      alert('Data Not Received');\n    });\n  }\n  addTask(task) {\n    const payload = {\n      taskName: task.taskName,\n      completed: false\n    };\n    axios({\n      url: 'http://localhost:8080/tasks/save',\n      method: 'POST',\n      data: payload\n    }).then(() => {\n      console.log('Saved');\n    }).catch(() => {\n      console.log('Failed to Save');\n    });\n    const currentTasks = this.tasksArraySubject.value;\n    const updatedTasks = [...currentTasks, task];\n    this.tasksArraySubject.next(updatedTasks);\n  }\n  toggleComplete(_id) {\n    const task = this.tasks$.find(item => item._id === _id);\n    axios.put(`http://localhost:8080/tasks/${_id}`, {\n      completed: !task.completed\n    }).then(() => {\n      console.log('Successfully Updated');\n    }).catch(() => {\n      console.log('Failed to Update');\n    });\n  }\n}\nDataSharingService.ɵfac = function DataSharingService_Factory(t) {\n  return new (t || DataSharingService)();\n};\nDataSharingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataSharingService,\n  factory: DataSharingService.ɵfac,\n  providedIn: 'root'\n});\nexport { DataSharingService };","map":{"version":3,"names":["BehaviorSubject","axios","DataSharingService","constructor","tasksArraySubject","tasks$","asObservable","getTasks","get","then","response","data","next","catch","alert","addTask","task","payload","taskName","completed","url","method","console","log","currentTasks","value","updatedTasks","toggleComplete","_id","find","item","put","factory","ɵfac","providedIn"],"sources":["C:\\Users\\joesc\\Documents\\angular\\todolist2axios\\client\\src\\app\\rxjs\\DataService.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { TaskItem } from '../models/taskItem';\r\nimport axios from 'axios';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataSharingService {\r\n  private tasksArraySubject = new BehaviorSubject<any[]>([]);\r\n\r\n  tasks$ = this.tasksArraySubject.asObservable();\r\n\r\n  getTasks() {\r\n    axios.get('http://localhost:8080/tasks')\r\n    .then((response) => {\r\n      const data = response.data;\r\n      this.tasksArraySubject.next(data);\r\n    })\r\n    .catch(() => {\r\n      alert('Data Not Received')\r\n    })\r\n  }\r\n\r\n  addTask(task: any) {\r\n    const payload = {\r\n      taskName: task.taskName,\r\n      completed: false\r\n    }\r\n    axios({\r\n      url: 'http://localhost:8080/tasks/save',\r\n      method: 'POST',\r\n      data: payload\r\n    })\r\n    .then(() => {\r\n      console.log('Saved')\r\n    })\r\n    .catch(() => {\r\n      console.log('Failed to Save')\r\n    })\r\n    const currentTasks = this.tasksArraySubject.value;\r\n    const updatedTasks = [...currentTasks, task];\r\n    this.tasksArraySubject.next(updatedTasks);\r\n  }\r\n  \r\n  toggleComplete(_id: string) {\r\n    const task = this.tasks$.find(item => item._id === _id)\r\n    axios.put(`http://localhost:8080/tasks/${_id}`, {completed: !task.completed})\r\n    .then(() => {\r\n      console.log('Successfully Updated')\r\n    })\r\n    .catch(() => {\r\n      console.log('Failed to Update')\r\n    })\r\n  }\r\n}\r\n"],"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;AAEtC,OAAOC,KAAK,MAAM,OAAO;;AAEzB,MAGaC,kBAAkB;EAH/BC,YAAA;IAIU,KAAAC,iBAAiB,GAAG,IAAIJ,eAAe,CAAQ,EAAE,CAAC;IAE1D,KAAAK,MAAM,GAAG,IAAI,CAACD,iBAAiB,CAACE,YAAY,EAAE;;EAE9CC,QAAQA,CAAA;IACNN,KAAK,CAACO,GAAG,CAAC,6BAA6B,CAAC,CACvCC,IAAI,CAAEC,QAAQ,IAAI;MACjB,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAI;MAC1B,IAAI,CAACP,iBAAiB,CAACQ,IAAI,CAACD,IAAI,CAAC;IACnC,CAAC,CAAC,CACDE,KAAK,CAAC,MAAK;MACVC,KAAK,CAAC,mBAAmB,CAAC;IAC5B,CAAC,CAAC;EACJ;EAEAC,OAAOA,CAACC,IAAS;IACf,MAAMC,OAAO,GAAG;MACdC,QAAQ,EAAEF,IAAI,CAACE,QAAQ;MACvBC,SAAS,EAAE;KACZ;IACDlB,KAAK,CAAC;MACJmB,GAAG,EAAE,kCAAkC;MACvCC,MAAM,EAAE,MAAM;MACdV,IAAI,EAAEM;KACP,CAAC,CACDR,IAAI,CAAC,MAAK;MACTa,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACtB,CAAC,CAAC,CACDV,KAAK,CAAC,MAAK;MACVS,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC/B,CAAC,CAAC;IACF,MAAMC,YAAY,GAAG,IAAI,CAACpB,iBAAiB,CAACqB,KAAK;IACjD,MAAMC,YAAY,GAAG,CAAC,GAAGF,YAAY,EAAER,IAAI,CAAC;IAC5C,IAAI,CAACZ,iBAAiB,CAACQ,IAAI,CAACc,YAAY,CAAC;EAC3C;EAEAC,cAAcA,CAACC,GAAW;IACxB,MAAMZ,IAAI,GAAG,IAAI,CAACX,MAAM,CAACwB,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACF,GAAG,KAAKA,GAAG,CAAC;IACvD3B,KAAK,CAAC8B,GAAG,CAAC,+BAA+BH,GAAG,EAAE,EAAE;MAACT,SAAS,EAAE,CAACH,IAAI,CAACG;IAAS,CAAC,CAAC,CAC5EV,IAAI,CAAC,MAAK;MACTa,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACrC,CAAC,CAAC,CACDV,KAAK,CAAC,MAAK;MACVS,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;IACjC,CAAC,CAAC;EACJ;;AA9CWrB,kBAAkB,C;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB,C;SAAlBA,kBAAkB;EAAA8B,OAAA,EAAlB9B,kBAAkB,CAAA+B,IAAA;EAAAC,UAAA,EAFjB;AAAM;SAEPhC,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}